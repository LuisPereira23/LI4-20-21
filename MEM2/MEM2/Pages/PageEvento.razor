@page "/EventoDetails/{Id}"

@using MEM2.Data
@using MEM2.Data.MEM2
@using System.Diagnostics

@inherits OwningComponentBase<EventoService>
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider

<h1> @Evento.Titulo </h1>

<p><em>@Evento.Descricao</em></p>
<p><em>@Evento.Categoria</em></p>
<p><em>@Evento.Inicio</em></p>
<p><em>@Evento.Fim</em></p>


<AuthorizeView>
    <!-- Show this section if the user is logged in -->
    <Authorized>
        @if (on) {
        <button @onclick="FollowFunction">Unfollow</button>
        } else {
        <button @onclick="FollowFunction">Follow</button>
        }
         

    </Authorized>
    <!-- Show this section if the user is not logged in -->
</AuthorizeView>

<h1>Bing Map</h1>

<div id="map" style="height:534px;width:380px;"> </div>

@code{

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }


    [Parameter]
    public string Id { get; set; }

    Evento Evento = new Evento();

    private bool load = false;
    Boolean on;

    protected override async Task OnInitializedAsync()
    {
        Evento = await @Service.GetEvento(int.Parse(Id));
        load = true;
        var user = (await authenticationStateTask).User;
        bool On = Service.IsFollowing(user.Identity.Name, Evento.Id);
        on = On;
        Debug.WriteLine(On);

    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {


        if (load)
        {
            await JS.InvokeVoidAsync("loadBingMap", Evento.Latitude, Evento.Longitude);
            load = false;
        }


    }



    protected async Task FollowFunction() {

        var user = (await authenticationStateTask).User;
        Service.SetSeguido(user.Identity.Name, Evento.Id,on);
        on = !on;
    }
}
